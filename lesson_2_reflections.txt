What happens when you initialize a repository? Why do you need to do it?

    Git creates the .git directory containing its internal structures. This
    is needed, as it is the place where git keeps information about the files
    it is tracking, their history, commits, and all other git objects.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area stores files and state that will go into the next commit.
    It is different from the repository in that it can still change and those
    changes will not be part of the history. Further changes to the working
    directory will not affect the staging area.

How can you use the staging area to make sure you have one commit per logical
change?

    I can selectively add to the staging area from the working directory only
    the changes that make logical sense for the commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    When working on experimental features, or even on new large features, when
    working in teams, it is useful to create a branch that isolates that work
    in its own "space". In this way, colleagues are not affected by the ongoing
    unfinished work; large features that require work for long periods of time
    may be in unusable state and it is always good to be able to switch to the
    working version and apply a small change or fix.

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
